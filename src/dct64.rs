// GENERATED CODE
// Fast DCT IDCT 64x64

#![allow(non_snake_case)]

#[inline(always)]
fn fast_dct_1d(src: &[f32], out: &mut [f32], stridea: usize, strideb: usize) {
	let v_00 = -0.104036f32;
	let v_01 = -0.207508f32;
	let v_02 = -0.241777f32;
	let v_03 = -0.377189f32;
	let v_04 = -0.410525f32;
	let v_05 = -0.476434f32;
	let v_06 = -0.508968f32;
	let v_07 = -0.635846f32;
	let v_08 = -0.707107f32;
	let v_09 = -0.727051f32;
	let v_0A = -0.756601f32;
	let v_0B = -0.785695f32;
	let v_0C = -0.870069f32;
	let v_0D = -0.897168f32;
	let v_0E = -0.949728f32;
	let v_0F = -0.975158f32;
	let v_10 =  0.034707f32;
	let v_11 =  0.067650f32;
	let v_12 =  0.069392f32;
	let v_13 =  0.104036f32;
	let v_14 =  0.125000f32;
	let v_15 =  0.138617f32;
	let v_16 =  0.163320f32;
	let v_17 =  0.173115f32;
	let v_18 =  0.207508f32;
	let v_19 =  0.241777f32;
	let v_1A =  0.275899f32;
	let v_1B =  0.309856f32;
	let v_1C =  0.343626f32;
	let v_1D =  0.377189f32;
	let v_1E =  0.410525f32;
	let v_1F =  0.443613f32;
	let v_20 =  0.476434f32;
	let v_21 =  0.508968f32;
	let v_22 =  0.573098f32;
	let v_23 =  0.604654f32;
	let v_24 =  0.635846f32;
	let v_25 =  0.666656f32;
	let v_26 =  0.697063f32;
	let v_27 =  0.707107f32;
	let v_28 =  0.727051f32;
	let v_29 =  0.756601f32;
	let v_2A =  0.785695f32;
	let v_2B =  0.814316f32;
	let v_2C =  0.842446f32;
	let v_2D =  0.870069f32;
	let v_2E =  0.897168f32;
	let v_2F =  0.923726f32;
	let v_30 =  0.949728f32;
	let v_31 =  0.975158f32;
	let v_32 =  1.024240f32;
	let v_33 =  1.047863f32;
	let v_34 =  1.070855f32;
	let v_35 =  1.093202f32;
	let v_36 =  1.114890f32;
	let v_37 =  1.135907f32;
	let v_38 =  1.156240f32;
	let v_39 =  1.175876f32;
	let v_3A =  1.194803f32;
	let v_3B =  1.213011f32;
	let v_3C =  1.230489f32;
	let v_3D =  1.247225f32;
	let v_3E =  1.263210f32;
	let v_3F =  1.278434f32;
	let v_40 =  1.292888f32;
	let v_41 =  1.319451f32;
	let v_42 =  1.331544f32;
	let v_43 =  1.342836f32;
	let v_44 =  1.353318f32;
	let v_45 =  1.362985f32;
	let v_46 =  1.371831f32;
	let v_47 =  1.379851f32;
	let v_48 =  1.387040f32;
	let v_49 =  1.393393f32;
	let v_4A =  1.398907f32;
	let v_4B =  1.403578f32;
	let v_4C =  1.407404f32;
	let v_4D =  1.410382f32;
	let v_4E =  1.412510f32;
	let v_4F =  1.413788f32;

	let mut src_index = 0;
	let mut out_index = 0;

	for _ in 0..64 {
		let s_00 = src[( 0 * stridea) + src_index];
		let s_01 = src[( 1 * stridea) + src_index];
		let s_02 = src[( 2 * stridea) + src_index];
		let s_03 = src[( 3 * stridea) + src_index];
		let s_04 = src[( 4 * stridea) + src_index];
		let s_05 = src[( 5 * stridea) + src_index];
		let s_06 = src[( 6 * stridea) + src_index];
		let s_07 = src[( 7 * stridea) + src_index];
		let s_08 = src[( 8 * stridea) + src_index];
		let s_09 = src[( 9 * stridea) + src_index];
		let s_0A = src[(10 * stridea) + src_index];
		let s_0B = src[(11 * stridea) + src_index];
		let s_0C = src[(12 * stridea) + src_index];
		let s_0D = src[(13 * stridea) + src_index];
		let s_0E = src[(14 * stridea) + src_index];
		let s_0F = src[(15 * stridea) + src_index];
		let s_10 = src[(16 * stridea) + src_index];
		let s_11 = src[(17 * stridea) + src_index];
		let s_12 = src[(18 * stridea) + src_index];
		let s_13 = src[(19 * stridea) + src_index];
		let s_14 = src[(20 * stridea) + src_index];
		let s_15 = src[(21 * stridea) + src_index];
		let s_16 = src[(22 * stridea) + src_index];
		let s_17 = src[(23 * stridea) + src_index];
		let s_18 = src[(24 * stridea) + src_index];
		let s_19 = src[(25 * stridea) + src_index];
		let s_1A = src[(26 * stridea) + src_index];
		let s_1B = src[(27 * stridea) + src_index];
		let s_1C = src[(28 * stridea) + src_index];
		let s_1D = src[(29 * stridea) + src_index];
		let s_1E = src[(30 * stridea) + src_index];
		let s_1F = src[(31 * stridea) + src_index];
		let s_20 = src[(32 * stridea) + src_index];
		let s_21 = src[(33 * stridea) + src_index];
		let s_22 = src[(34 * stridea) + src_index];
		let s_23 = src[(35 * stridea) + src_index];
		let s_24 = src[(36 * stridea) + src_index];
		let s_25 = src[(37 * stridea) + src_index];
		let s_26 = src[(38 * stridea) + src_index];
		let s_27 = src[(39 * stridea) + src_index];
		let s_28 = src[(40 * stridea) + src_index];
		let s_29 = src[(41 * stridea) + src_index];
		let s_2A = src[(42 * stridea) + src_index];
		let s_2B = src[(43 * stridea) + src_index];
		let s_2C = src[(44 * stridea) + src_index];
		let s_2D = src[(45 * stridea) + src_index];
		let s_2E = src[(46 * stridea) + src_index];
		let s_2F = src[(47 * stridea) + src_index];
		let s_30 = src[(48 * stridea) + src_index];
		let s_31 = src[(49 * stridea) + src_index];
		let s_32 = src[(50 * stridea) + src_index];
		let s_33 = src[(51 * stridea) + src_index];
		let s_34 = src[(52 * stridea) + src_index];
		let s_35 = src[(53 * stridea) + src_index];
		let s_36 = src[(54 * stridea) + src_index];
		let s_37 = src[(55 * stridea) + src_index];
		let s_38 = src[(56 * stridea) + src_index];
		let s_39 = src[(57 * stridea) + src_index];
		let s_3A = src[(58 * stridea) + src_index];
		let s_3B = src[(59 * stridea) + src_index];
		let s_3C = src[(60 * stridea) + src_index];
		let s_3D = src[(61 * stridea) + src_index];
		let s_3E = src[(62 * stridea) + src_index];
		let s_3F = src[(63 * stridea) + src_index];

		let x_000 = s_00 + s_3F;
		let x_011 = s_01 + s_3E;
		let x_022 = s_02 + s_3D;
		let x_033 = s_03 + s_3C;
		let x_034 = s_04 + s_3B;
		let x_035 = s_05 + s_3A;
		let x_036 = s_06 + s_39;
		let x_037 = s_07 + s_38;
		let x_038 = s_08 + s_37;
		let x_039 = s_09 + s_36;
		let x_03A = s_0A + s_35;
		let x_03B = s_0B + s_34;
		let x_03C = s_0C + s_33;
		let x_03D = s_0D + s_32;
		let x_03E = s_0E + s_31;
		let x_03F = s_0F + s_30;
		let x_001 = s_10 + s_2F;
		let x_002 = s_11 + s_2E;
		let x_003 = s_12 + s_2D;
		let x_004 = s_13 + s_2C;
		let x_005 = s_14 + s_2B;
		let x_006 = s_15 + s_2A;
		let x_007 = s_16 + s_29;
		let x_008 = s_17 + s_28;
		let x_009 = s_18 + s_27;
		let x_00A = s_19 + s_26;
		let x_00B = s_1A + s_25;
		let x_00C = s_1B + s_24;
		let x_00D = s_1C + s_23;
		let x_00E = s_1D + s_22;
		let x_00F = s_1E + s_21;
		let x_010 = s_1F + s_20;
		let x_012 = s_00 - s_3F;
		let x_013 = s_01 - s_3E;
		let x_014 = s_02 - s_3D;
		let x_015 = s_03 - s_3C;
		let x_016 = s_04 - s_3B;
		let x_017 = s_05 - s_3A;
		let x_018 = s_06 - s_39;
		let x_019 = s_07 - s_38;
		let x_01A = s_08 - s_37;
		let x_01B = s_09 - s_36;
		let x_01C = s_0A - s_35;
		let x_01D = s_0B - s_34;
		let x_01E = s_0C - s_33;
		let x_01F = s_0D - s_32;
		let x_020 = s_0E - s_31;
		let x_021 = s_0F - s_30;
		let x_023 = s_10 - s_2F;
		let x_024 = s_11 - s_2E;
		let x_025 = s_12 - s_2D;
		let x_026 = s_13 - s_2C;
		let x_027 = s_14 - s_2B;
		let x_028 = s_15 - s_2A;
		let x_029 = s_16 - s_29;
		let x_02A = s_17 - s_28;
		let x_02B = s_18 - s_27;
		let x_02C = s_19 - s_26;
		let x_02D = s_1A - s_25;
		let x_02E = s_1B - s_24;
		let x_02F = s_1C - s_23;
		let x_030 = s_1D - s_22;
		let x_031 = s_1E - s_21;
		let x_032 = s_1F - s_20;
		let x_0D8 = x_000 + x_010;
		let x_0E9 = x_00F + x_011;
		let x_0EA = x_00E + x_022;
		let x_0EB = x_00D + x_033;
		let x_0EC = x_00C + x_034;
		let x_0ED = x_00B + x_035;
		let x_0EE = x_00A + x_036;
		let x_0EF = x_009 + x_037;
		let x_0F0 = x_008 + x_038;
		let x_0F1 = x_007 + x_039;
		let x_0F2 = x_006 + x_03A;
		let x_0F3 = x_005 + x_03B;
		let x_0F4 = x_004 + x_03C;
		let x_0F5 = x_003 + x_03D;
		let x_0F6 = x_002 + x_03E;
		let x_0F7 = x_001 + x_03F;
		let x_0D9 = x_000 - x_010;
		let x_0DA = -x_00F + x_011;
		let x_0DB = -x_00E + x_022;
		let x_0DC = -x_00D + x_033;
		let x_0DD = -x_00C + x_034;
		let x_0DE = -x_00B + x_035;
		let x_0DF = -x_00A + x_036;
		let x_0E0 = -x_009 + x_037;
		let x_0E1 = -x_008 + x_038;
		let x_0E2 = -x_007 + x_039;
		let x_0E3 = -x_006 + x_03A;
		let x_0E4 = -x_005 + x_03B;
		let x_0E5 = -x_004 + x_03C;
		let x_0E6 = -x_003 + x_03D;
		let x_0E7 = -x_002 + x_03E;
		let x_0E8 = -x_001 + x_03F;
		let x_157 = x_0D8 + x_0F7;
		let x_158 = x_0E9 + x_0F6;
		let x_159 = x_0EA + x_0F5;
		let x_15A = x_0EB + x_0F4;
		let x_15B = x_0EC + x_0F3;
		let x_15C = x_0ED + x_0F2;
		let x_15D = x_0EE + x_0F1;
		let x_15E = x_0EF + x_0F0;
		let x_15F = x_0D8 - x_0F7;
		let x_160 = x_0E9 - x_0F6;
		let x_161 = x_0EA - x_0F5;
		let x_162 = x_0EB - x_0F4;
		let x_163 = x_0EC - x_0F3;
		let x_164 = x_0ED - x_0F2;
		let x_165 = x_0EE - x_0F1;
		let x_166 = x_0EF - x_0F0;
		let x_167 = x_157 + x_15E;
		let x_168 = x_158 + x_15D;
		let x_169 = x_159 + x_15C;
		let x_16A = x_15A + x_15B;
		let x_16B = x_157 - x_15E;
		let x_16C = x_158 - x_15D;
		let x_16D = x_159 - x_15C;
		let x_16E = x_15A - x_15B;
		let x_16F = x_167 + x_16A;
		let x_170 = x_168 + x_169;
		let x_171 = x_167 - x_16A;
		let x_172 = x_168 - x_169;
		let x_173 = v_48 * x_16B + v_1A * x_16E;
		let x_174 = v_39 * x_16C + v_2A * x_16D;
		let x_175 = v_0B * x_16C + v_39 * x_16D;
		let x_176 = v_1A * x_16B - v_48 * x_16E;
		let x_177 = v_14 * (x_173 - x_174);
		let x_178 = v_14 * (x_175 - x_176);
		let x_179 = v_4C * x_15F + v_15 * x_166;
		let x_17A = v_44 * x_160 + v_1E * x_165;
		let x_17B = v_3D * x_161 + v_25 * x_164;
		let x_17C = v_35 * x_162 + v_2E * x_163;
		let x_17D = v_0D * x_162 + v_35 * x_163;
		let x_17E = v_25 * x_161 - v_3D * x_164;
		let x_17F = v_04 * x_160 + v_44 * x_165;
		let x_180 = v_15 * x_15F - v_4C * x_166;
		let x_181 = x_179 + x_17C;
		let x_182 = x_17A + x_17B;
		let x_183 = x_179 - x_17C;
		let x_184 = x_17A - x_17B;
		let x_185 = v_14 * (x_181 - x_182);
		let x_186 = v_16 * x_183 + v_11 * x_184;
		let x_187 = v_11 * x_183 - v_16 * x_184;
		let x_040 = x_17D + x_180;
		let x_041 = x_17E + x_17F;
		let x_042 = x_17D - x_180;
		let x_043 = x_17E - x_17F;
		let x_044 = v_14 * (x_040 - x_041);
		let x_045 = v_16 * x_042 + v_11 * x_043;
		let x_046 = v_11 * x_042 - v_16 * x_043;
		let x_047 = v_4E * x_0D9 + v_12 * x_0E8;
		let x_048 = v_4A * x_0DA + v_18 * x_0E7;
		let x_049 = v_46 * x_0DB + v_1C * x_0E6;
		let x_04A = v_42 * x_0DC + v_20 * x_0E5;
		let x_04B = v_3F * x_0DD + v_23 * x_0E4;
		let x_04C = v_3B * x_0DE + v_28 * x_0E3;
		let x_04D = v_37 * x_0DF + v_2C * x_0E2;
		let x_04E = v_33 * x_0E0 + v_30 * x_0E1;
		let x_04F = v_0E * x_0E0 + v_33 * x_0E1;
		let x_050 = v_2C * x_0DF - v_37 * x_0E2;
		let x_051 = v_09 * x_0DE + v_3B * x_0E3;
		let x_052 = v_23 * x_0DD - v_3F * x_0E4;
		let x_053 = v_05 * x_0DC + v_42 * x_0E5;
		let x_054 = v_1C * x_0DB - v_46 * x_0E6;
		let x_055 = v_01 * x_0DA + v_4A * x_0E7;
		let x_056 = v_12 * x_0D9 - v_4E * x_0E8;
		let x_057 = x_047 + x_04E;
		let x_058 = x_048 + x_04D;
		let x_059 = x_049 + x_04C;
		let x_05A = x_04A + x_04B;
		let x_05B = x_047 - x_04E;
		let x_05C = x_048 - x_04D;
		let x_05D = x_049 - x_04C;
		let x_05E = x_04A - x_04B;
		let x_061 = x_057 + x_05A;
		let x_062 = x_058 + x_059;
		let x_063 = x_057 - x_05A;
		let x_064 = x_058 - x_059;
		let x_065 = v_14 * (x_061 - x_062);
		let x_066 = v_16 * x_063 + v_11 * x_064;
		let x_067 = v_11 * x_063 - v_16 * x_064;
		let x_068 = v_48 * x_05B + v_1A * x_05E;
		let x_069 = v_39 * x_05C + v_2A * x_05D;
		let x_06A = v_0B * x_05C + v_39 * x_05D;
		let x_06B = v_1A * x_05B - v_48 * x_05E;
		let x_06C = v_14 * (x_068 + x_069);
		let x_06D = v_14 * (x_068 - x_069);
		let x_06E = v_14 * (x_06A + x_06B);
		let x_06F = v_14 * (x_06A - x_06B);
		let x_05F = v_27 * (x_06D - x_06F);
		let x_060 = v_27 * (x_06D + x_06F);
		let x_070 = x_04F + x_056;
		let x_071 = x_050 + x_055;
		let x_072 = x_051 + x_054;
		let x_073 = x_052 + x_053;
		let x_074 = x_04F - x_056;
		let x_075 = x_050 - x_055;
		let x_076 = x_051 - x_054;
		let x_077 = x_052 - x_053;
		let x_07A = x_070 + x_073;
		let x_07B = x_071 + x_072;
		let x_07C = x_070 - x_073;
		let x_07D = x_071 - x_072;
		let x_07E = v_14 * (x_07A - x_07B);
		let x_07F = v_16 * x_07C + v_11 * x_07D;
		let x_080 = v_11 * x_07C - v_16 * x_07D;
		let x_081 = v_48 * x_074 + v_1A * x_077;
		let x_082 = v_39 * x_075 + v_2A * x_076;
		let x_083 = v_0B * x_075 + v_39 * x_076;
		let x_084 = v_1A * x_074 - v_48 * x_077;
		let x_085 = v_14 * (x_081 + x_082);
		let x_086 = v_14 * (x_081 - x_082);
		let x_087 = v_14 * (x_083 + x_084);
		let x_088 = v_14 * (x_083 - x_084);
		let x_078 = v_27 * (x_086 - x_088);
		let x_079 = v_27 * (x_086 + x_088);
		let x_089 = v_4F * x_012 + v_10 * x_032;
		let x_09A = v_4D * x_013 + v_13 * x_031;
		let x_09B = v_4B * x_014 + v_17 * x_030;
		let x_09C = v_49 * x_015 + v_19 * x_02F;
		let x_09D = v_47 * x_016 + v_1B * x_02E;
		let x_09E = v_45 * x_017 + v_1D * x_02D;
		let x_09F = v_43 * x_018 + v_1F * x_02C;
		let x_0A0 = v_41 * x_019 + v_21 * x_02B;
		let x_0A1 = v_40 * x_01A + v_22 * x_02A;
		let x_0A2 = v_3E * x_01B + v_24 * x_029;
		let x_0A3 = v_3C * x_01C + v_26 * x_028;
		let x_0A4 = v_3A * x_01D + v_29 * x_027;
		let x_0A5 = v_38 * x_01E + v_2B * x_026;
		let x_0A6 = v_36 * x_01F + v_2D * x_025;
		let x_0A7 = v_34 * x_020 + v_2F * x_024;
		let x_0A8 = v_32 * x_021 + v_31 * x_023;
		let x_08A = v_0F * x_021 + v_32 * x_023;
		let x_08B = v_2F * x_020 - v_34 * x_024;
		let x_08C = v_0C * x_01F + v_36 * x_025;
		let x_08D = v_2B * x_01E - v_38 * x_026;
		let x_08E = v_0A * x_01D + v_3A * x_027;
		let x_08F = v_26 * x_01C - v_3C * x_028;
		let x_090 = v_07 * x_01B + v_3E * x_029;
		let x_091 = v_22 * x_01A - v_40 * x_02A;
		let x_092 = v_06 * x_019 + v_41 * x_02B;
		let x_093 = v_1F * x_018 - v_43 * x_02C;
		let x_094 = v_03 * x_017 + v_45 * x_02D;
		let x_095 = v_1B * x_016 - v_47 * x_02E;
		let x_096 = v_02 * x_015 + v_49 * x_02F;
		let x_097 = v_17 * x_014 - v_4B * x_030;
		let x_098 = v_00 * x_013 + v_4D * x_031;
		let x_099 = v_10 * x_012 - v_4F * x_032;
		let x_0A9 = x_089 + x_0A8;
		let x_0AA = x_09A + x_0A7;
		let x_0AB = x_09B + x_0A6;
		let x_0AC = x_09C + x_0A5;
		let x_0AD = x_09D + x_0A4;
		let x_0AE = x_09E + x_0A3;
		let x_0AF = x_09F + x_0A2;
		let x_0B0 = x_0A0 + x_0A1;
		let x_0B1 = x_089 - x_0A8;
		let x_0B2 = x_09A - x_0A7;
		let x_0B3 = x_09B - x_0A6;
		let x_0B4 = x_09C - x_0A5;
		let x_0B5 = x_09D - x_0A4;
		let x_0B6 = x_09E - x_0A3;
		let x_0B7 = x_09F - x_0A2;
		let x_0B8 = x_0A0 - x_0A1;
		let x_0BF = x_0A9 + x_0B0;
		let x_0C0 = x_0AA + x_0AF;
		let x_0C1 = x_0AB + x_0AE;
		let x_0C2 = x_0AC + x_0AD;
		let x_0C3 = x_0A9 - x_0B0;
		let x_0C4 = x_0AA - x_0AF;
		let x_0C5 = x_0AB - x_0AE;
		let x_0C6 = x_0AC - x_0AD;
		let x_0C9 = x_0BF + x_0C2;
		let x_0CA = x_0C0 + x_0C1;
		let x_0CB = x_0BF - x_0C2;
		let x_0CC = x_0C0 - x_0C1;
		let x_0CD = v_14 * (x_0C9 - x_0CA);
		let x_0CE = v_16 * x_0CB + v_11 * x_0CC;
		let x_0CF = v_11 * x_0CB - v_16 * x_0CC;
		let x_0D0 = v_48 * x_0C3 + v_1A * x_0C6;
		let x_0D1 = v_39 * x_0C4 + v_2A * x_0C5;
		let x_0D2 = v_0B * x_0C4 + v_39 * x_0C5;
		let x_0D3 = v_1A * x_0C3 - v_48 * x_0C6;
		let x_0D4 = v_14 * (x_0D0 + x_0D1);
		let x_0D5 = v_14 * (x_0D0 - x_0D1);
		let x_0D6 = v_14 * (x_0D2 + x_0D3);
		let x_0D7 = v_14 * (x_0D2 - x_0D3);
		let x_0C7 = v_27 * (x_0D5 - x_0D7);
		let x_0C8 = v_27 * (x_0D5 + x_0D7);
		let x_0F8 = v_4C * x_0B1 + v_15 * x_0B8;
		let x_0F9 = v_44 * x_0B2 + v_1E * x_0B7;
		let x_0FA = v_3D * x_0B3 + v_25 * x_0B6;
		let x_0FB = v_35 * x_0B4 + v_2E * x_0B5;
		let x_0FC = v_0D * x_0B4 + v_35 * x_0B5;
		let x_0FD = v_25 * x_0B3 - v_3D * x_0B6;
		let x_0FE = v_04 * x_0B2 + v_44 * x_0B7;
		let x_0FF = v_15 * x_0B1 - v_4C * x_0B8;
		let x_100 = x_0F8 + x_0FB;
		let x_101 = x_0F9 + x_0FA;
		let x_102 = x_0F8 - x_0FB;
		let x_103 = x_0F9 - x_0FA;
		let x_104 = v_14 * (x_100 + x_101);
		let x_105 = v_14 * (x_100 - x_101);
		let x_106 = v_16 * x_102 + v_11 * x_103;
		let x_107 = v_11 * x_102 - v_16 * x_103;
		let x_108 = x_0FC + x_0FF;
		let x_109 = x_0FD + x_0FE;
		let x_10A = x_0FC - x_0FF;
		let x_10B = x_0FD - x_0FE;
		let x_10C = v_14 * (x_108 + x_109);
		let x_10D = v_14 * (x_108 - x_109);
		let x_10E = v_16 * x_10A + v_11 * x_10B;
		let x_10F = v_11 * x_10A - v_16 * x_10B;
		let x_0B9 = v_27 * (x_106 - x_10F);
		let x_0BA = v_27 * (x_106 + x_10F);
		let x_0BB = v_27 * (x_105 + x_10D);
		let x_0BC = v_27 * (x_105 - x_10D);
		let x_0BD = v_27 * (x_107 - x_10E);
		let x_0BE = v_27 * (x_107 + x_10E);
		let x_110 = x_08A + x_099;
		let x_111 = x_08B + x_098;
		let x_112 = x_08C + x_097;
		let x_113 = x_08D + x_096;
		let x_114 = x_08E + x_095;
		let x_115 = x_08F + x_094;
		let x_116 = x_090 + x_093;
		let x_117 = x_091 + x_092;
		let x_118 = x_08A - x_099;
		let x_119 = x_08B - x_098;
		let x_11A = x_08C - x_097;
		let x_11B = x_08D - x_096;
		let x_11C = x_08E - x_095;
		let x_11D = x_08F - x_094;
		let x_11E = x_090 - x_093;
		let x_11F = x_091 - x_092;
		let x_126 = x_110 + x_117;
		let x_127 = x_111 + x_116;
		let x_128 = x_112 + x_115;
		let x_129 = x_113 + x_114;
		let x_12A = x_110 - x_117;
		let x_12B = x_111 - x_116;
		let x_12C = x_112 - x_115;
		let x_12D = x_113 - x_114;
		let x_130 = x_126 + x_129;
		let x_131 = x_127 + x_128;
		let x_132 = x_126 - x_129;
		let x_133 = x_127 - x_128;
		let x_134 = v_14 * (x_130 - x_131);
		let x_135 = v_16 * x_132 + v_11 * x_133;
		let x_136 = v_11 * x_132 - v_16 * x_133;
		let x_137 = v_48 * x_12A + v_1A * x_12D;
		let x_138 = v_39 * x_12B + v_2A * x_12C;
		let x_139 = v_0B * x_12B + v_39 * x_12C;
		let x_13A = v_1A * x_12A - v_48 * x_12D;
		let x_13B = v_14 * (x_137 + x_138);
		let x_13C = v_14 * (x_137 - x_138);
		let x_13D = v_14 * (x_139 + x_13A);
		let x_13E = v_14 * (x_139 - x_13A);
		let x_12E = v_27 * (x_13C - x_13E);
		let x_12F = v_27 * (x_13C + x_13E);
		let x_13F = v_4C * x_118 + v_15 * x_11F;
		let x_140 = v_44 * x_119 + v_1E * x_11E;
		let x_141 = v_3D * x_11A + v_25 * x_11D;
		let x_142 = v_35 * x_11B + v_2E * x_11C;
		let x_143 = v_0D * x_11B + v_35 * x_11C;
		let x_144 = v_25 * x_11A - v_3D * x_11D;
		let x_145 = v_04 * x_119 + v_44 * x_11E;
		let x_146 = v_15 * x_118 - v_4C * x_11F;
		let x_147 = x_13F + x_142;
		let x_148 = x_140 + x_141;
		let x_149 = x_13F - x_142;
		let x_14A = x_140 - x_141;
		let x_14B = v_14 * (x_147 + x_148);
		let x_14C = v_14 * (x_147 - x_148);
		let x_14D = v_16 * x_149 + v_11 * x_14A;
		let x_14E = v_11 * x_149 - v_16 * x_14A;
		let x_14F = x_143 + x_146;
		let x_150 = x_144 + x_145;
		let x_151 = x_143 - x_146;
		let x_152 = x_144 - x_145;
		let x_153 = v_14 * (x_14F + x_150);
		let x_154 = v_14 * (x_14F - x_150);
		let x_155 = v_16 * x_151 + v_11 * x_152;
		let x_156 = v_11 * x_151 - v_16 * x_152;
		let x_120 = v_27 * (x_14D - x_156);
		let x_121 = v_27 * (x_14D + x_156);
		let x_122 = v_27 * (x_14C + x_154);
		let x_123 = v_27 * (x_14C - x_154);
		let x_124 = v_27 * (x_14E - x_155);
		let x_125 = v_27 * (x_14E + x_155);

		out[( 0 * stridea) + out_index] = v_14 * (x_16F + x_170);
		out[( 1 * stridea) + out_index] = v_14 * (x_0C9 + x_0CA);
		out[( 2 * stridea) + out_index] = v_14 * (x_061 + x_062);
		out[( 3 * stridea) + out_index] = v_08 * x_153 + v_27 * x_104;
		out[( 4 * stridea) + out_index] = v_14 * (x_181 + x_182);
		out[( 5 * stridea) + out_index] = v_27 * (x_153 + x_104);
		out[( 6 * stridea) + out_index] = v_27 * (x_06C - x_087);
		out[( 7 * stridea) + out_index] = v_27 * (x_13D + x_0D4);
		out[( 8 * stridea) + out_index] = v_14 * (x_173 + x_174);
		out[( 9 * stridea) + out_index] = v_08 * x_13D + v_27 * x_0D4;
		out[(10 * stridea) + out_index] = v_27 * (x_06C + x_087);
		out[(11 * stridea) + out_index] = v_08 * x_125 + v_27 * x_0B9;
		out[(12 * stridea) + out_index] = v_27 * (x_186 - x_046);
		out[(13 * stridea) + out_index] = v_27 * (x_125 + x_0B9);
		out[(14 * stridea) + out_index] = v_27 * (x_066 + x_080);
		out[(15 * stridea) + out_index] = v_27 * (x_136 + x_0CE);
		out[(16 * stridea) + out_index] = v_16 * x_171 + v_11 * x_172;
		out[(17 * stridea) + out_index] = v_08 * x_136 + v_27 * x_0CE;
		out[(18 * stridea) + out_index] = v_27 * (x_066 - x_080);
		out[(19 * stridea) + out_index] = v_08 * x_124 + v_27 * x_0BA;
		out[(20 * stridea) + out_index] = v_27 * (x_186 + x_046);
		out[(21 * stridea) + out_index] = v_27 * (x_124 + x_0BA);
		out[(22 * stridea) + out_index] = v_27 * (x_05F - x_079);
		out[(23 * stridea) + out_index] = v_27 * (x_12F + x_0C7);
		out[(24 * stridea) + out_index] = v_27 * (x_177 - x_178);
		out[(25 * stridea) + out_index] = v_08 * x_12F + v_27 * x_0C7;
		out[(26 * stridea) + out_index] = v_27 * (x_05F + x_079);
		out[(27 * stridea) + out_index] = v_08 * x_123 + v_27 * x_0BB;
		out[(28 * stridea) + out_index] = v_27 * (x_185 + x_044);
		out[(29 * stridea) + out_index] = v_27 * (x_123 + x_0BB);
		out[(30 * stridea) + out_index] = v_27 * (x_065 + x_07E);
		out[(31 * stridea) + out_index] = v_27 * (x_134 + x_0CD);
		out[(32 * stridea) + out_index] = v_14 * (x_16F - x_170);
		out[(33 * stridea) + out_index] = v_08 * x_134 + v_27 * x_0CD;
		out[(34 * stridea) + out_index] = v_27 * (x_065 - x_07E);
		out[(35 * stridea) + out_index] = v_08 * x_122 + v_27 * x_0BC;
		out[(36 * stridea) + out_index] = v_27 * (x_185 - x_044);
		out[(37 * stridea) + out_index] = v_27 * (x_122 + x_0BC);
		out[(38 * stridea) + out_index] = v_27 * (x_060 - x_078);
		out[(39 * stridea) + out_index] = v_27 * (x_12E + x_0C8);
		out[(40 * stridea) + out_index] = v_27 * (x_177 + x_178);
		out[(41 * stridea) + out_index] = v_08 * x_12E + v_27 * x_0C8;
		out[(42 * stridea) + out_index] = v_27 * (x_060 + x_078);
		out[(43 * stridea) + out_index] = v_08 * x_121 + v_27 * x_0BD;
		out[(44 * stridea) + out_index] = v_27 * (x_187 - x_045);
		out[(45 * stridea) + out_index] = v_27 * (x_121 + x_0BD);
		out[(46 * stridea) + out_index] = v_27 * (x_067 + x_07F);
		out[(47 * stridea) + out_index] = v_27 * (x_135 + x_0CF);
		out[(48 * stridea) + out_index] = v_11 * x_171 - v_16 * x_172;
		out[(49 * stridea) + out_index] = v_08 * x_135 + v_27 * x_0CF;
		out[(50 * stridea) + out_index] = v_27 * (x_067 - x_07F);
		out[(51 * stridea) + out_index] = v_08 * x_120 + v_27 * x_0BE;
		out[(52 * stridea) + out_index] = v_27 * (x_187 + x_045);
		out[(53 * stridea) + out_index] = v_27 * (x_120 + x_0BE);
		out[(54 * stridea) + out_index] = v_27 * (x_06E - x_085);
		out[(55 * stridea) + out_index] = v_27 * (x_13B + x_0D6);
		out[(56 * stridea) + out_index] = v_14 * (x_175 + x_176);
		out[(57 * stridea) + out_index] = v_08 * x_13B + v_27 * x_0D6;
		out[(58 * stridea) + out_index] = v_27 * (x_06E + x_085);
		out[(59 * stridea) + out_index] = v_08 * x_14B + v_27 * x_10C;
		out[(60 * stridea) + out_index] = v_14 * (x_040 + x_041);
		out[(61 * stridea) + out_index] = v_27 * (x_14B + x_10C);
		out[(62 * stridea) + out_index] = v_14 * (x_07A + x_07B);
		out[(63 * stridea) + out_index] = v_14 * (x_130 + x_131);

		src_index += strideb;
		out_index += strideb;
	}
}

pub fn fast_dct(src: &[f32], out: &mut [f32]) {
	let mut tmp = vec![0.0f32; 64 * 64];
	fast_dct_1d(src, &mut tmp, 1, 64);
	fast_dct_1d(&tmp, out, 64, 1);
}

#[inline(always)]
fn fast_idct_1d(src: &[f32], out: &mut [f32], stridea: usize, strideb: usize) {
	let v_00 = -0.034707f32;
	let v_01 = -0.104036f32;
	let v_02 = -0.138617f32;
	let v_03 = -0.173115f32;
	let v_04 = -0.241777f32;
	let v_05 = -0.275899f32;
	let v_06 = -0.309856f32;
	let v_07 = -0.377189f32;
	let v_08 = -0.410525f32;
	let v_09 = -0.443613f32;
	let v_0A = -0.508968f32;
	let v_0B = -0.541196f32;
	let v_0C = -0.573098f32;
	let v_0D = -0.635846f32;
	let v_0E = -0.666656f32;
	let v_0F = -0.697063f32;
	let v_10 = -0.707107f32;
	let v_11 = -0.756601f32;
	let v_12 = -0.785695f32;
	let v_13 = -0.814316f32;
	let v_14 = -0.870069f32;
	let v_15 = -0.897168f32;
	let v_16 = -0.923726f32;
	let v_17 = -0.975158f32;
	let v_18 =  0.034707f32;
	let v_19 =  0.069392f32;
	let v_1A =  0.088388f32;
	let v_1B =  0.104036f32;
	let v_1C =  0.125000f32;
	let v_1D =  0.138617f32;
	let v_1E =  0.173115f32;
	let v_1F =  0.176777f32;
	let v_20 =  0.207508f32;
	let v_21 =  0.241777f32;
	let v_22 =  0.275899f32;
	let v_23 =  0.309856f32;
	let v_24 =  0.343626f32;
	let v_25 =  0.377189f32;
	let v_26 =  0.410525f32;
	let v_27 =  0.443613f32;
	let v_28 =  0.476434f32;
	let v_29 =  0.508968f32;
	let v_2A =  0.541196f32;
	let v_2B =  0.573098f32;
	let v_2C =  0.604654f32;
	let v_2D =  0.635846f32;
	let v_2E =  0.666656f32;
	let v_2F =  0.697063f32;
	let v_30 =  0.707107f32;
	let v_31 =  0.727051f32;
	let v_32 =  0.756601f32;
	let v_33 =  0.785695f32;
	let v_34 =  0.814316f32;
	let v_35 =  0.842446f32;
	let v_36 =  0.870069f32;
	let v_37 =  0.897168f32;
	let v_38 =  0.923726f32;
	let v_39 =  0.949728f32;
	let v_3A =  0.975158f32;
	let v_3B =  1.024240f32;
	let v_3C =  1.047863f32;
	let v_3D =  1.070855f32;
	let v_3E =  1.093202f32;
	let v_3F =  1.114890f32;
	let v_40 =  1.135907f32;
	let v_41 =  1.156240f32;
	let v_42 =  1.175876f32;
	let v_43 =  1.194803f32;
	let v_44 =  1.213011f32;
	let v_45 =  1.230489f32;
	let v_46 =  1.247225f32;
	let v_47 =  1.263210f32;
	let v_48 =  1.278434f32;
	let v_49 =  1.292888f32;
	let v_4A =  1.306563f32;
	let v_4B =  1.319451f32;
	let v_4C =  1.331544f32;
	let v_4D =  1.342836f32;
	let v_4E =  1.353318f32;
	let v_4F =  1.362985f32;
	let v_50 =  1.371831f32;
	let v_51 =  1.379851f32;
	let v_52 =  1.387040f32;
	let v_53 =  1.393393f32;
	let v_54 =  1.398907f32;
	let v_55 =  1.403578f32;
	let v_56 =  1.407404f32;
	let v_57 =  1.410382f32;
	let v_58 =  1.412510f32;
	let v_59 =  1.413788f32;
	let v_5A =  1.414214f32;

	let mut src_index = 0;
	let mut out_index = 0;

	for _ in 0..64 {
		let s_00 = src[( 0 * stridea) + src_index];
		let s_01 = src[( 1 * stridea) + src_index];
		let s_02 = src[( 2 * stridea) + src_index];
		let s_03 = src[( 3 * stridea) + src_index];
		let s_04 = src[( 4 * stridea) + src_index];
		let s_05 = src[( 5 * stridea) + src_index];
		let s_06 = src[( 6 * stridea) + src_index];
		let s_07 = src[( 7 * stridea) + src_index];
		let s_08 = src[( 8 * stridea) + src_index];
		let s_09 = src[( 9 * stridea) + src_index];
		let s_0A = src[(10 * stridea) + src_index];
		let s_0B = src[(11 * stridea) + src_index];
		let s_0C = src[(12 * stridea) + src_index];
		let s_0D = src[(13 * stridea) + src_index];
		let s_0E = src[(14 * stridea) + src_index];
		let s_0F = src[(15 * stridea) + src_index];
		let s_10 = src[(16 * stridea) + src_index];
		let s_11 = src[(17 * stridea) + src_index];
		let s_12 = src[(18 * stridea) + src_index];
		let s_13 = src[(19 * stridea) + src_index];
		let s_14 = src[(20 * stridea) + src_index];
		let s_15 = src[(21 * stridea) + src_index];
		let s_16 = src[(22 * stridea) + src_index];
		let s_17 = src[(23 * stridea) + src_index];
		let s_18 = src[(24 * stridea) + src_index];
		let s_19 = src[(25 * stridea) + src_index];
		let s_1A = src[(26 * stridea) + src_index];
		let s_1B = src[(27 * stridea) + src_index];
		let s_1C = src[(28 * stridea) + src_index];
		let s_1D = src[(29 * stridea) + src_index];
		let s_1E = src[(30 * stridea) + src_index];
		let s_1F = src[(31 * stridea) + src_index];
		let s_20 = src[(32 * stridea) + src_index];
		let s_21 = src[(33 * stridea) + src_index];
		let s_22 = src[(34 * stridea) + src_index];
		let s_23 = src[(35 * stridea) + src_index];
		let s_24 = src[(36 * stridea) + src_index];
		let s_25 = src[(37 * stridea) + src_index];
		let s_26 = src[(38 * stridea) + src_index];
		let s_27 = src[(39 * stridea) + src_index];
		let s_28 = src[(40 * stridea) + src_index];
		let s_29 = src[(41 * stridea) + src_index];
		let s_2A = src[(42 * stridea) + src_index];
		let s_2B = src[(43 * stridea) + src_index];
		let s_2C = src[(44 * stridea) + src_index];
		let s_2D = src[(45 * stridea) + src_index];
		let s_2E = src[(46 * stridea) + src_index];
		let s_2F = src[(47 * stridea) + src_index];
		let s_30 = src[(48 * stridea) + src_index];
		let s_31 = src[(49 * stridea) + src_index];
		let s_32 = src[(50 * stridea) + src_index];
		let s_33 = src[(51 * stridea) + src_index];
		let s_34 = src[(52 * stridea) + src_index];
		let s_35 = src[(53 * stridea) + src_index];
		let s_36 = src[(54 * stridea) + src_index];
		let s_37 = src[(55 * stridea) + src_index];
		let s_38 = src[(56 * stridea) + src_index];
		let s_39 = src[(57 * stridea) + src_index];
		let s_3A = src[(58 * stridea) + src_index];
		let s_3B = src[(59 * stridea) + src_index];
		let s_3C = src[(60 * stridea) + src_index];
		let s_3D = src[(61 * stridea) + src_index];
		let s_3E = src[(62 * stridea) + src_index];
		let s_3F = src[(63 * stridea) + src_index];

		let x_000 = v_5A * s_00;
		let x_011 = v_59 * s_01 + v_18 * s_3F;
		let x_022 = v_58 * s_02 + v_19 * s_3E;
		let x_033 = v_57 * s_03 + v_1B * s_3D;
		let x_034 = v_56 * s_04 + v_1D * s_3C;
		let x_035 = v_55 * s_05 + v_1E * s_3B;
		let x_036 = v_54 * s_06 + v_20 * s_3A;
		let x_037 = v_53 * s_07 + v_21 * s_39;
		let x_038 = v_52 * s_08 + v_22 * s_38;
		let x_039 = v_51 * s_09 + v_23 * s_37;
		let x_03A = v_50 * s_0A + v_24 * s_36;
		let x_03B = v_4F * s_0B + v_25 * s_35;
		let x_03C = v_4E * s_0C + v_26 * s_34;
		let x_03D = v_4D * s_0D + v_27 * s_33;
		let x_03E = v_4C * s_0E + v_28 * s_32;
		let x_03F = v_4B * s_0F + v_29 * s_31;
		let x_001 = v_4A * s_10 + v_2A * s_30;
		let x_002 = v_49 * s_11 + v_2B * s_2F;
		let x_003 = v_48 * s_12 + v_2C * s_2E;
		let x_004 = v_47 * s_13 + v_2D * s_2D;
		let x_005 = v_46 * s_14 + v_2E * s_2C;
		let x_006 = v_45 * s_15 + v_2F * s_2B;
		let x_007 = v_44 * s_16 + v_31 * s_2A;
		let x_008 = v_43 * s_17 + v_32 * s_29;
		let x_009 = v_42 * s_18 + v_33 * s_28;
		let x_00A = v_41 * s_19 + v_34 * s_27;
		let x_00B = v_40 * s_1A + v_35 * s_26;
		let x_00C = v_3F * s_1B + v_36 * s_25;
		let x_00D = v_3E * s_1C + v_37 * s_24;
		let x_00E = v_3D * s_1D + v_38 * s_23;
		let x_00F = v_3C * s_1E + v_39 * s_22;
		let x_010 = v_3B * s_1F + v_3A * s_21;
		let x_012 = v_5A * s_20;
		let x_013 = v_17 * s_1F + v_3B * s_21;
		let x_014 = v_39 * s_1E - v_3C * s_22;
		let x_015 = v_16 * s_1D + v_3D * s_23;
		let x_016 = v_37 * s_1C - v_3E * s_24;
		let x_017 = v_14 * s_1B + v_3F * s_25;
		let x_018 = v_35 * s_1A - v_40 * s_26;
		let x_019 = v_13 * s_19 + v_41 * s_27;
		let x_01A = v_33 * s_18 - v_42 * s_28;
		let x_01B = v_11 * s_17 + v_43 * s_29;
		let x_01C = v_31 * s_16 - v_44 * s_2A;
		let x_01D = v_0F * s_15 + v_45 * s_2B;
		let x_01E = v_2E * s_14 - v_46 * s_2C;
		let x_01F = v_0D * s_13 + v_47 * s_2D;
		let x_020 = v_2C * s_12 - v_48 * s_2E;
		let x_021 = v_0C * s_11 + v_49 * s_2F;
		let x_023 = v_2A * s_10 - v_4A * s_30;
		let x_024 = v_0A * s_0F + v_4B * s_31;
		let x_025 = v_28 * s_0E - v_4C * s_32;
		let x_026 = v_09 * s_0D + v_4D * s_33;
		let x_027 = v_26 * s_0C - v_4E * s_34;
		let x_028 = v_07 * s_0B + v_4F * s_35;
		let x_029 = v_24 * s_0A - v_50 * s_36;
		let x_02A = v_06 * s_09 + v_51 * s_37;
		let x_02B = v_22 * s_08 - v_52 * s_38;
		let x_02C = v_04 * s_07 + v_53 * s_39;
		let x_02D = v_20 * s_06 - v_54 * s_3A;
		let x_02E = v_03 * s_05 + v_55 * s_3B;
		let x_02F = v_1D * s_04 - v_56 * s_3C;
		let x_030 = v_01 * s_03 + v_57 * s_3D;
		let x_031 = v_19 * s_02 - v_58 * s_3E;
		let x_032 = v_00 * s_01 + v_59 * s_3F;
		let x_0F5 = x_000 + x_012;
		let x_106 = x_010 + x_011;
		let x_108 = x_00F + x_022;
		let x_109 = x_00E + x_033;
		let x_10A = x_00D + x_034;
		let x_10B = x_00C + x_035;
		let x_10C = x_00B + x_036;
		let x_10D = x_00A + x_037;
		let x_10E = x_009 + x_038;
		let x_10F = x_008 + x_039;
		let x_110 = x_007 + x_03A;
		let x_111 = x_006 + x_03B;
		let x_112 = x_005 + x_03C;
		let x_113 = x_004 + x_03D;
		let x_114 = x_003 + x_03E;
		let x_115 = x_002 + x_03F;
		let x_0F6 = v_5A * x_001;
		let x_0F7 = x_000 - x_012;
		let x_0F8 = -x_010 + x_011;
		let x_0F9 = -x_00F + x_022;
		let x_0FA = -x_00E + x_033;
		let x_0FB = -x_00D + x_034;
		let x_0FC = -x_00C + x_035;
		let x_0FD = -x_00B + x_036;
		let x_0FE = -x_00A + x_037;
		let x_0FF = -x_009 + x_038;
		let x_100 = -x_008 + x_039;
		let x_101 = -x_007 + x_03A;
		let x_102 = -x_006 + x_03B;
		let x_103 = -x_005 + x_03C;
		let x_104 = -x_004 + x_03D;
		let x_105 = -x_003 + x_03E;
		let x_107 = -x_002 + x_03F;
		let x_184 = x_0F5 + x_0F6;
		let x_186 = x_106 + x_115;
		let x_187 = x_108 + x_114;
		let x_188 = x_109 + x_113;
		let x_189 = x_10A + x_112;
		let x_18A = x_10B + x_111;
		let x_18B = x_10C + x_110;
		let x_18C = x_10D + x_10F;
		let x_18D = v_5A * x_10E;
		let x_18E = x_0F5 - x_0F6;
		let x_18F = x_106 - x_115;
		let x_190 = x_108 - x_114;
		let x_191 = x_109 - x_113;
		let x_192 = x_10A - x_112;
		let x_193 = x_10B - x_111;
		let x_194 = x_10C - x_110;
		let x_185 = x_10D - x_10F;
		let x_19B = x_184 + x_18D;
		let x_19C = x_186 + x_18C;
		let x_19D = x_187 + x_18B;
		let x_19E = x_188 + x_18A;
		let x_19F = v_5A * x_189;
		let x_1A0 = x_184 - x_18D;
		let x_1A1 = x_186 - x_18C;
		let x_1A2 = x_187 - x_18B;
		let x_1A3 = x_188 - x_18A;
		let x_1A6 = x_19B + x_19F;
		let x_1A7 = x_19C + x_19E;
		let x_1A8 = v_5A * x_19D;
		let x_1A9 = x_19B - x_19F;
		let x_1AA = x_19C - x_19E;
		let x_1AB = v_1C * (x_1A6 - x_1A8);
		let x_1AC = v_1C * (x_1A9 + x_1AA);
		let x_1AD = v_1C * (x_1A9 - x_1AA);
		let x_1AE = v_5A * x_1A0;
		let x_1AF = v_4A * x_1A1 + v_2A * x_1A3;
		let x_1B0 = v_5A * x_1A2;
		let x_1B1 = v_0B * x_1A1 + v_4A * x_1A3;
		let x_1B2 = v_1A * (x_1AE + x_1B0) + v_1C * x_1AF;
		let x_1B3 = v_1C * (x_1AE - x_1B0);
		let x_1B4 = v_1A * (x_1AE + x_1B0) - v_1C * x_1AF;
		let x_1B5 = v_1F * x_1B1;
		let x_1A4 = v_30 * (x_1B3 - x_1B5);
		let x_1A5 = v_30 * (x_1B3 + x_1B5);
		let x_1B6 = v_5A * x_18E;
		let x_1B7 = v_22 * x_185 + v_52 * x_18F;
		let x_1B8 = v_4A * x_190 + v_2A * x_194;
		let x_1B9 = v_42 * x_191 + v_33 * x_193;
		let x_1BA = v_5A * x_192;
		let x_1BB = v_12 * x_191 + v_42 * x_193;
		let x_1BC = v_2A * x_190 - v_4A * x_194;
		let x_1BD = v_52 * x_185 - v_22 * x_18F;
		let x_1BF = x_1B6 + x_1BA;
		let x_1C0 = x_1B7 + x_1B9;
		let x_1C1 = v_5A * x_1B8;
		let x_1C2 = x_1B6 - x_1BA;
		let x_1C3 = x_1B7 - x_1B9;
		let x_1C4 = v_1A * (x_1BF + x_1C1) + v_1C * x_1C0;
		let x_1C5 = v_1C * (x_1BF - x_1C1);
		let x_1C6 = v_1A * (x_1BF + x_1C1) - v_1C * x_1C0;
		let x_1C7 = v_1C * (x_1C2 + x_1C3);
		let x_1C8 = v_1C * (x_1C2 - x_1C3);
		let x_040 = v_5A * x_1BC;
		let x_041 = x_1BB + x_1BD;
		let x_042 = x_1BB - x_1BD;
		let x_043 = v_1C * (x_040 + x_041);
		let x_044 = v_1C * (x_040 - x_041);
		let x_045 = v_1F * x_042;
		let x_1BE = -x_044;
		let x_195 = v_30 * (x_1C7 - x_1BE);
		let x_196 = v_30 * (x_1C7 + x_1BE);
		let x_197 = v_30 * (x_1C5 + x_045);
		let x_198 = v_30 * (x_1C5 - x_045);
		let x_199 = v_30 * (x_1C8 - x_043);
		let x_19A = v_30 * (x_1C8 + x_043);
		let x_046 = v_5A * x_0F7;
		let x_047 = v_56 * x_0F8 + v_1D * x_107;
		let x_048 = v_52 * x_0F9 + v_22 * x_105;
		let x_049 = v_4E * x_0FA + v_26 * x_104;
		let x_04A = v_4A * x_0FB + v_2A * x_103;
		let x_04B = v_46 * x_0FC + v_2E * x_102;
		let x_04C = v_42 * x_0FD + v_33 * x_101;
		let x_04D = v_3E * x_0FE + v_37 * x_100;
		let x_04E = v_5A * x_0FF;
		let x_04F = v_15 * x_0FE + v_3E * x_100;
		let x_050 = v_33 * x_0FD - v_42 * x_101;
		let x_051 = v_0E * x_0FC + v_46 * x_102;
		let x_052 = v_2A * x_0FB - v_4A * x_103;
		let x_053 = v_08 * x_0FA + v_4E * x_104;
		let x_054 = v_22 * x_0F9 - v_52 * x_105;
		let x_055 = v_02 * x_0F8 + v_56 * x_107;
		let x_058 = x_046 + x_04E;
		let x_059 = x_047 + x_04D;
		let x_05A = x_048 + x_04C;
		let x_05B = x_049 + x_04B;
		let x_05C = v_5A * x_04A;
		let x_05D = x_046 - x_04E;
		let x_05E = x_047 - x_04D;
		let x_05F = x_048 - x_04C;
		let x_060 = x_049 - x_04B;
		let x_063 = x_058 + x_05C;
		let x_064 = x_059 + x_05B;
		let x_065 = v_5A * x_05A;
		let x_066 = x_058 - x_05C;
		let x_067 = x_059 - x_05B;
		let x_068 = v_1A * (x_063 + x_065) + v_1C * x_064;
		let x_069 = v_1C * (x_063 - x_065);
		let x_06A = v_1A * (x_063 + x_065) - v_1C * x_064;
		let x_06B = v_1C * (x_066 + x_067);
		let x_06C = v_1C * (x_066 - x_067);
		let x_06D = v_5A * x_05D;
		let x_06E = v_4A * x_05E + v_2A * x_060;
		let x_06F = v_5A * x_05F;
		let x_070 = v_0B * x_05E + v_4A * x_060;
		let x_071 = v_1A * (x_06D + x_06F) + v_1C * x_06E;
		let x_072 = v_1C * (x_06D - x_06F);
		let x_073 = v_1A * (x_06D + x_06F) - v_1C * x_06E;
		let x_074 = v_1F * x_070;
		let x_061 = v_30 * (x_072 - x_074);
		let x_062 = v_30 * (x_072 + x_074);
		let x_07D = v_5A * x_052;
		let x_07E = x_051 + x_053;
		let x_07F = x_050 + x_054;
		let x_080 = x_04F + x_055;
		let x_081 = x_04F - x_055;
		let x_082 = x_050 - x_054;
		let x_083 = x_051 - x_053;
		let x_087 = v_5A * x_07D;
		let x_088 = v_4A * x_07E + v_2A * x_080;
		let x_089 = v_5A * x_07F;
		let x_08A = v_0B * x_07E + v_4A * x_080;
		let x_08B = v_1A * (x_087 + x_089) + v_1C * x_088;
		let x_08C = v_1C * (x_087 - x_089);
		let x_08D = v_1A * (x_087 + x_089) - v_1C * x_088;
		let x_08E = v_1F * x_08A;
		let x_084 = v_30 * (x_08C - x_08E);
		let x_085 = v_30 * (x_08C + x_08E);
		let x_08F = v_5A * x_082;
		let x_090 = x_081 + x_083;
		let x_091 = x_081 - x_083;
		let x_092 = v_1C * (x_08F + x_090);
		let x_093 = v_1C * (x_08F - x_090);
		let x_094 = v_1F * x_091;
		let x_086 = -x_093;
		let x_056 = -x_084;
		let x_057 = -x_08D;
		let x_168 = v_30 * (x_071 - x_057);
		let x_169 = v_30 * (x_071 + x_057);
		let x_16A = v_30 * (x_06B + x_086);
		let x_16B = v_30 * (x_06B - x_086);
		let x_16C = v_30 * (x_061 - x_085);
		let x_16D = v_30 * (x_061 + x_085);
		let x_16E = v_30 * (x_069 + x_094);
		let x_16F = v_30 * (x_069 - x_094);
		let x_170 = v_30 * (x_062 - x_056);
		let x_171 = v_30 * (x_062 + x_056);
		let x_172 = v_30 * (x_06C + x_092);
		let x_173 = v_30 * (x_06C - x_092);
		let x_174 = v_30 * (x_073 - x_08B);
		let x_175 = v_30 * (x_073 + x_08B);
		let x_095 = v_5A * x_023;
		let x_0A5 = x_021 + x_024;
		let x_0A6 = x_020 + x_025;
		let x_0A7 = x_01F + x_026;
		let x_0A8 = x_01E + x_027;
		let x_0A9 = x_01D + x_028;
		let x_0AA = x_01C + x_029;
		let x_0AB = x_01B + x_02A;
		let x_0AC = x_01A + x_02B;
		let x_0AD = x_019 + x_02C;
		let x_0AE = x_018 + x_02D;
		let x_0AF = x_017 + x_02E;
		let x_0B0 = x_016 + x_02F;
		let x_0B1 = x_015 + x_030;
		let x_0B2 = x_014 + x_031;
		let x_0B3 = x_013 + x_032;
		let x_096 = x_013 - x_032;
		let x_097 = x_014 - x_031;
		let x_098 = x_015 - x_030;
		let x_099 = x_016 - x_02F;
		let x_09A = x_017 - x_02E;
		let x_09B = x_018 - x_02D;
		let x_09C = x_019 - x_02C;
		let x_09D = x_01A - x_02B;
		let x_09E = x_01B - x_02A;
		let x_09F = x_01C - x_029;
		let x_0A0 = x_01D - x_028;
		let x_0A1 = x_01E - x_027;
		let x_0A2 = x_01F - x_026;
		let x_0A3 = x_020 - x_025;
		let x_0A4 = x_021 - x_024;
		let x_0C6 = v_5A * x_095;
		let x_0C7 = v_56 * x_0A5 + v_1D * x_0B3;
		let x_0C8 = v_52 * x_0A6 + v_22 * x_0B2;
		let x_0C9 = v_4E * x_0A7 + v_26 * x_0B1;
		let x_0CA = v_4A * x_0A8 + v_2A * x_0B0;
		let x_0CB = v_46 * x_0A9 + v_2E * x_0AF;
		let x_0CC = v_42 * x_0AA + v_33 * x_0AE;
		let x_0CD = v_3E * x_0AB + v_37 * x_0AD;
		let x_0CE = v_5A * x_0AC;
		let x_0CF = v_15 * x_0AB + v_3E * x_0AD;
		let x_0D0 = v_33 * x_0AA - v_42 * x_0AE;
		let x_0D1 = v_0E * x_0A9 + v_46 * x_0AF;
		let x_0D2 = v_2A * x_0A8 - v_4A * x_0B0;
		let x_0D3 = v_08 * x_0A7 + v_4E * x_0B1;
		let x_0D4 = v_22 * x_0A6 - v_52 * x_0B2;
		let x_0D5 = v_02 * x_0A5 + v_56 * x_0B3;
		let x_0D8 = x_0C6 + x_0CE;
		let x_0D9 = x_0C7 + x_0CD;
		let x_0DA = x_0C8 + x_0CC;
		let x_0DB = x_0C9 + x_0CB;
		let x_0DC = v_5A * x_0CA;
		let x_0DD = x_0C6 - x_0CE;
		let x_0DE = x_0C7 - x_0CD;
		let x_0DF = x_0C8 - x_0CC;
		let x_0E0 = x_0C9 - x_0CB;
		let x_0E3 = x_0D8 + x_0DC;
		let x_0E4 = x_0D9 + x_0DB;
		let x_0E5 = v_5A * x_0DA;
		let x_0E6 = x_0D8 - x_0DC;
		let x_0E7 = x_0D9 - x_0DB;
		let x_0E8 = v_1A * (x_0E3 + x_0E5) + v_1C * x_0E4;
		let x_0E9 = v_1C * (x_0E3 - x_0E5);
		let x_0EA = v_1A * (x_0E3 + x_0E5) - v_1C * x_0E4;
		let x_0EB = v_1C * (x_0E6 + x_0E7);
		let x_0EC = v_1C * (x_0E6 - x_0E7);
		let x_0ED = v_5A * x_0DD;
		let x_0EE = v_4A * x_0DE + v_2A * x_0E0;
		let x_0EF = v_5A * x_0DF;
		let x_0F0 = v_0B * x_0DE + v_4A * x_0E0;
		let x_0F1 = v_1A * (x_0ED + x_0EF) + v_1C * x_0EE;
		let x_0F2 = v_1C * (x_0ED - x_0EF);
		let x_0F3 = v_1A * (x_0ED + x_0EF) - v_1C * x_0EE;
		let x_0F4 = v_1F * x_0F0;
		let x_0E1 = v_30 * (x_0F2 - x_0F4);
		let x_0E2 = v_30 * (x_0F2 + x_0F4);
		let x_116 = v_5A * x_0D2;
		let x_117 = x_0D1 + x_0D3;
		let x_118 = x_0D0 + x_0D4;
		let x_119 = x_0CF + x_0D5;
		let x_11A = x_0CF - x_0D5;
		let x_11B = x_0D0 - x_0D4;
		let x_11C = x_0D1 - x_0D3;
		let x_120 = v_5A * x_116;
		let x_121 = v_4A * x_117 + v_2A * x_119;
		let x_122 = v_5A * x_118;
		let x_123 = v_0B * x_117 + v_4A * x_119;
		let x_124 = v_1A * (x_120 + x_122) + v_1C * x_121;
		let x_125 = v_1C * (x_120 - x_122);
		let x_126 = v_1A * (x_120 + x_122) - v_1C * x_121;
		let x_127 = v_1F * x_123;
		let x_11D = v_30 * (x_125 - x_127);
		let x_11E = v_30 * (x_125 + x_127);
		let x_128 = v_5A * x_11B;
		let x_129 = x_11A + x_11C;
		let x_12A = x_11A - x_11C;
		let x_12B = v_1C * (x_128 + x_129);
		let x_12C = v_1C * (x_128 - x_129);
		let x_12D = v_1F * x_12A;
		let x_11F = -x_12C;
		let x_0D6 = -x_11D;
		let x_0D7 = -x_126;
		let x_0B8 = v_30 * (x_0F1 - x_0D7);
		let x_0B9 = v_30 * (x_0F1 + x_0D7);
		let x_0BA = v_30 * (x_0EB + x_11F);
		let x_0BB = v_30 * (x_0EB - x_11F);
		let x_0BC = v_30 * (x_0E1 - x_11E);
		let x_0BD = v_30 * (x_0E1 + x_11E);
		let x_0BE = v_30 * (x_0E9 + x_12D);
		let x_0BF = v_30 * (x_0E9 - x_12D);
		let x_0C0 = v_30 * (x_0E2 - x_0D6);
		let x_0C1 = v_30 * (x_0E2 + x_0D6);
		let x_0C2 = v_30 * (x_0EC + x_12B);
		let x_0C3 = v_30 * (x_0EC - x_12B);
		let x_0C4 = v_30 * (x_0F3 - x_124);
		let x_0C5 = v_30 * (x_0F3 + x_124);
		let x_12E = v_5A * x_09D;
		let x_12F = x_09C + x_09E;
		let x_130 = x_09B + x_09F;
		let x_131 = x_09A + x_0A0;
		let x_132 = x_099 + x_0A1;
		let x_133 = x_098 + x_0A2;
		let x_134 = x_097 + x_0A3;
		let x_135 = x_096 + x_0A4;
		let x_136 = x_096 - x_0A4;
		let x_137 = x_097 - x_0A3;
		let x_138 = x_098 - x_0A2;
		let x_139 = x_099 - x_0A1;
		let x_13A = x_09A - x_0A0;
		let x_13B = x_09B - x_09F;
		let x_13C = x_09C - x_09E;
		let x_145 = v_5A * x_12E;
		let x_146 = v_52 * x_12F + v_22 * x_135;
		let x_147 = v_4A * x_130 + v_2A * x_134;
		let x_148 = v_42 * x_131 + v_33 * x_133;
		let x_149 = v_5A * x_132;
		let x_14A = v_12 * x_131 + v_42 * x_133;
		let x_14B = v_2A * x_130 - v_4A * x_134;
		let x_14C = v_05 * x_12F + v_52 * x_135;
		let x_14E = x_145 + x_149;
		let x_14F = x_146 + x_148;
		let x_150 = v_5A * x_147;
		let x_151 = x_145 - x_149;
		let x_152 = x_146 - x_148;
		let x_153 = v_1A * (x_14E + x_150) + v_1C * x_14F;
		let x_154 = v_1C * (x_14E - x_150);
		let x_155 = v_1A * (x_14E + x_150) - v_1C * x_14F;
		let x_156 = v_1C * (x_151 + x_152);
		let x_157 = v_1C * (x_151 - x_152);
		let x_158 = v_5A * x_14B;
		let x_159 = x_14A + x_14C;
		let x_15A = x_14A - x_14C;
		let x_15B = v_1C * (x_158 + x_159);
		let x_15C = v_1C * (x_158 - x_159);
		let x_15D = v_1F * x_15A;
		let x_14D = -x_15C;
		let x_13D = v_30 * (x_156 - x_14D);
		let x_13E = v_30 * (x_156 + x_14D);
		let x_13F = v_30 * (x_154 + x_15D);
		let x_140 = v_30 * (x_154 - x_15D);
		let x_141 = v_30 * (x_157 - x_15B);
		let x_142 = v_30 * (x_157 + x_15B);
		let x_15E = v_5A * x_139;
		let x_15F = x_138 + x_13A;
		let x_160 = x_137 + x_13B;
		let x_161 = x_136 + x_13C;
		let x_162 = x_136 - x_13C;
		let x_163 = x_137 - x_13B;
		let x_164 = x_138 - x_13A;
		let x_176 = v_5A * x_15E;
		let x_177 = v_4A * x_15F + v_2A * x_161;
		let x_178 = v_5A * x_160;
		let x_179 = v_0B * x_15F + v_4A * x_161;
		let x_17A = v_1A * (x_176 + x_178) + v_1C * x_177;
		let x_17B = v_1C * (x_176 - x_178);
		let x_17C = v_1A * (x_176 + x_178) - v_1C * x_177;
		let x_17D = v_1F * x_179;
		let x_165 = v_30 * (x_17B - x_17D);
		let x_166 = v_30 * (x_17B + x_17D);
		let x_17E = v_5A * x_163;
		let x_17F = x_162 + x_164;
		let x_180 = x_162 - x_164;
		let x_181 = v_1C * (x_17E + x_17F);
		let x_182 = v_1C * (x_17E - x_17F);
		let x_183 = v_1F * x_180;
		let x_167 = -x_182;
		let x_143 = -x_165;
		let x_144 = -x_17C;
		let x_0B4 = -x_13D;
		let x_0B5 = -x_13F;
		let x_0B6 = -x_141;
		let x_0B7 = -x_155;
		let x_075 = -x_0B8;
		let x_076 = -x_0BA;
		let x_077 = -x_0BC;
		let x_078 = -x_0BE;
		let x_079 = -x_0C0;
		let x_07A = -x_0C2;
		let x_07B = -x_0C4;
		let x_07C = -x_0EA;

		out[( 0 * stridea) + out_index] = v_1A * (x_1A6 + x_1A8) + v_1C * x_1A7;
		out[( 1 * stridea) + out_index] = v_30 * (x_068 - x_07C);
		out[( 2 * stridea) + out_index] = v_30 * (x_068 + x_07C);
		out[( 3 * stridea) + out_index] = v_30 * (x_1C4 + x_0B7);
		out[( 4 * stridea) + out_index] = v_30 * (x_1C4 - x_0B7);
		out[( 5 * stridea) + out_index] = v_10 * x_0C5 + v_30 * x_168;
		out[( 6 * stridea) + out_index] = v_30 * (x_0C5 + x_168);
		out[( 7 * stridea) + out_index] = v_30 * (x_144 + x_1B2);
		out[( 8 * stridea) + out_index] = v_10 * x_144 + v_30 * x_1B2;
		out[( 9 * stridea) + out_index] = v_10 * x_07B + v_30 * x_169;
		out[(10 * stridea) + out_index] = v_30 * (x_07B + x_169);
		out[(11 * stridea) + out_index] = v_30 * (x_142 + x_195);
		out[(12 * stridea) + out_index] = v_10 * x_142 + v_30 * x_195;
		out[(13 * stridea) + out_index] = v_10 * x_0C3 + v_30 * x_16A;
		out[(14 * stridea) + out_index] = v_30 * (x_0C3 + x_16A);
		out[(15 * stridea) + out_index] = v_30 * (x_167 + x_1AC);
		out[(16 * stridea) + out_index] = v_10 * x_167 + v_30 * x_1AC;
		out[(17 * stridea) + out_index] = v_10 * x_07A + v_30 * x_16B;
		out[(18 * stridea) + out_index] = v_30 * (x_07A + x_16B);
		out[(19 * stridea) + out_index] = v_30 * (x_0B6 + x_196);
		out[(20 * stridea) + out_index] = v_10 * x_0B6 + v_30 * x_196;
		out[(21 * stridea) + out_index] = v_10 * x_0C1 + v_30 * x_16C;
		out[(22 * stridea) + out_index] = v_30 * (x_0C1 + x_16C);
		out[(23 * stridea) + out_index] = v_30 * (x_166 + x_1A4);
		out[(24 * stridea) + out_index] = v_10 * x_166 + v_30 * x_1A4;
		out[(25 * stridea) + out_index] = v_10 * x_079 + v_30 * x_16D;
		out[(26 * stridea) + out_index] = v_30 * (x_079 + x_16D);
		out[(27 * stridea) + out_index] = v_30 * (x_140 + x_197);
		out[(28 * stridea) + out_index] = v_10 * x_140 + v_30 * x_197;
		out[(29 * stridea) + out_index] = v_10 * x_0BF + v_30 * x_16E;
		out[(30 * stridea) + out_index] = v_30 * (x_0BF + x_16E);
		out[(31 * stridea) + out_index] = v_30 * (x_1AB + x_183);
		out[(32 * stridea) + out_index] = v_30 * (x_1AB - x_183);
		out[(33 * stridea) + out_index] = v_30 * (x_16F - x_078);
		out[(34 * stridea) + out_index] = v_30 * (x_16F + x_078);
		out[(35 * stridea) + out_index] = v_30 * (x_198 + x_0B5);
		out[(36 * stridea) + out_index] = v_30 * (x_198 - x_0B5);
		out[(37 * stridea) + out_index] = v_30 * (x_170 - x_0BD);
		out[(38 * stridea) + out_index] = v_30 * (x_170 + x_0BD);
		out[(39 * stridea) + out_index] = v_30 * (x_1A5 + x_143);
		out[(40 * stridea) + out_index] = v_30 * (x_1A5 - x_143);
		out[(41 * stridea) + out_index] = v_30 * (x_171 - x_077);
		out[(42 * stridea) + out_index] = v_30 * (x_171 + x_077);
		out[(43 * stridea) + out_index] = v_30 * (x_199 + x_13E);
		out[(44 * stridea) + out_index] = v_30 * (x_199 - x_13E);
		out[(45 * stridea) + out_index] = v_30 * (x_172 - x_0BB);
		out[(46 * stridea) + out_index] = v_30 * (x_172 + x_0BB);
		out[(47 * stridea) + out_index] = v_30 * (x_1AD + x_181);
		out[(48 * stridea) + out_index] = v_30 * (x_1AD - x_181);
		out[(49 * stridea) + out_index] = v_30 * (x_173 - x_076);
		out[(50 * stridea) + out_index] = v_30 * (x_173 + x_076);
		out[(51 * stridea) + out_index] = v_30 * (x_19A + x_0B4);
		out[(52 * stridea) + out_index] = v_30 * (x_19A - x_0B4);
		out[(53 * stridea) + out_index] = v_30 * (x_174 - x_0B9);
		out[(54 * stridea) + out_index] = v_30 * (x_174 + x_0B9);
		out[(55 * stridea) + out_index] = v_30 * (x_1B4 + x_17A);
		out[(56 * stridea) + out_index] = v_30 * (x_1B4 - x_17A);
		out[(57 * stridea) + out_index] = v_30 * (x_175 - x_075);
		out[(58 * stridea) + out_index] = v_30 * (x_175 + x_075);
		out[(59 * stridea) + out_index] = v_30 * (x_1C6 + x_153);
		out[(60 * stridea) + out_index] = v_30 * (x_1C6 - x_153);
		out[(61 * stridea) + out_index] = v_30 * (x_06A - x_0E8);
		out[(62 * stridea) + out_index] = v_30 * (x_06A + x_0E8);
		out[(63 * stridea) + out_index] = v_1A * (x_1A6 + x_1A8) - v_1C * x_1A7;

		src_index += strideb;
		out_index += strideb;
	}
}

pub fn fast_idct(src: &[f32], out: &mut [f32]) {
	let mut tmp = vec![0.0f32; 64 * 64];
	fast_idct_1d(src, &mut tmp, 1, 64);
	fast_idct_1d(&tmp, out, 64, 1);
}